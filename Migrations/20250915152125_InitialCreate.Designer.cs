// <auto-generated />
using System;
using LibrarySystemApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarySystemApi.Migrations
{
    [DbContext(typeof(BookLibraryDbContext))]
    [Migration("20250915152125_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibrarySystemApi.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            GenreId = 2,
                            ImageUrl = "obstacle-the-way.jpg",
                            Isbn = "9781591846352",
                            Pages = 224,
                            PublicationYear = 2014,
                            Title = "The Obstacle Is the Way"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            GenreId = 2,
                            ImageUrl = "meditations.jpg",
                            Isbn = "9780140449334",
                            Pages = 304,
                            PublicationYear = 180,
                            Title = "Meditations"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            GenreId = 2,
                            ImageUrl = "letters-from-stoic.jpg",
                            Isbn = "9780140442106",
                            Pages = 256,
                            PublicationYear = 65,
                            Title = "Letters from a Stoic"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            GenreId = 2,
                            ImageUrl = "art-of-living.jpg",
                            Isbn = "9780061286056",
                            Pages = 144,
                            PublicationYear = 55,
                            Title = "The Art of Living"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            GenreId = 4,
                            ImageUrl = "tools-of-titans.jpg",
                            Isbn = "9781328683786",
                            Pages = 704,
                            PublicationYear = 2016,
                            Title = "Tools of Titans"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            GenreId = 3,
                            ImageUrl = "laws-of-power.jpg",
                            Isbn = "9780140280197",
                            Pages = 452,
                            PublicationYear = 1998,
                            Title = "The 48 Laws of Power"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            GenreId = 3,
                            ImageUrl = "atomic-habits.jpg",
                            Isbn = "9780735211292",
                            Pages = 320,
                            PublicationYear = 2018,
                            Title = "Atomic Habits"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            GenreId = 3,
                            ImageUrl = "win-friends-and-people.jpg",
                            Isbn = "9780671027032",
                            Pages = 291,
                            PublicationYear = 1936,
                            Title = "How to Win Friends and Influence People"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            GenreId = 3,
                            ImageUrl = "effective-people.jpg",
                            Isbn = "9780743269513",
                            Pages = 381,
                            PublicationYear = 1989,
                            Title = "The 7 Habits of Highly Effective People"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            GenreId = 4,
                            ImageUrl = "deep-work.jpg",
                            Isbn = "9781455586691",
                            Pages = 304,
                            PublicationYear = 2016,
                            Title = "Deep Work"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 1,
                            GenreId = 3,
                            ImageUrl = "ego-is-enemyjpg",
                            Isbn = "9781591847816",
                            Pages = 256,
                            PublicationYear = 2016,
                            Title = "Ego Is the Enemy"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 1,
                            GenreId = 3,
                            ImageUrl = "stillness-is-key.jpg",
                            Isbn = "9780525538585",
                            Pages = 288,
                            PublicationYear = 2019,
                            Title = "Stillness Is the Key"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 1,
                            GenreId = 2,
                            ImageUrl = "daily-stoic.jpg",
                            Isbn = "9780735211735",
                            Pages = 416,
                            PublicationYear = 2016,
                            Title = "Daily Stoic"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 6,
                            GenreId = 3,
                            ImageUrl = "laws-of-human-nature.jpg",
                            Isbn = "9780525428145",
                            Pages = 624,
                            PublicationYear = 2018,
                            Title = "The Laws of Human Nature"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 5,
                            GenreId = 4,
                            ImageUrl = "tribe-of-mentors.jpg",
                            Isbn = "9781328994967",
                            Pages = 624,
                            PublicationYear = 2017,
                            Title = "Tribe of Mentors"
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mvog-Betsi",
                            Email = "clovis@mail.com",
                            FullName = "Clovis Bin Kebeh",
                            JoinedDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+237645645432",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Name = "Ryan Holiday"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Rome",
                            Name = "Marcus Aurelius"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Rome",
                            Name = "Seneca"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Turkey",
                            Name = "Epictetus"
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            Name = "Tim Ferriss"
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            Name = "Robert Greene"
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            Name = "James Clear"
                        },
                        new
                        {
                            Id = 8,
                            Country = "USA",
                            Name = "Dale Carnegie"
                        },
                        new
                        {
                            Id = 9,
                            Country = "USA",
                            Name = "Stephen Covey"
                        },
                        new
                        {
                            Id = 10,
                            Country = "USA",
                            Name = "Cal Newport"
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Models.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CopyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId", "Barcode")
                        .IsUnique();

                    b.HasIndex("BookId", "CopyNumber")
                        .IsUnique();

                    b.ToTable("BooksCopies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "123456789001",
                            BookId = 1,
                            CopyNumber = "copy #1",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "123456734401",
                            BookId = 1,
                            CopyNumber = "copy #2",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "12355559001",
                            BookId = 1,
                            CopyNumber = "copy #3",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "123456789222",
                            BookId = 3,
                            CopyNumber = "copy #1",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "1234567891111",
                            BookId = 1,
                            CopyNumber = "copy #4",
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stoicism"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Productivity"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 6,
                            Name = "History"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Psychology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Non-fiction"
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookCopyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("LoanDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Renewals")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ReturnDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BookCopyId");

                    b.HasIndex("MemberId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "clovis@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFK0oYnrWfEwye5H/s6oxNRwVBLxbSqrj6X0/dPwVg5vRsQom3Vu/gNF2x6R9uKWQQ==",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("LibrarySystemApi.Book", b =>
                {
                    b.HasOne("LibrarySystemApi.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystemApi.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Admin", b =>
                {
                    b.HasOne("LibrarySystemApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.BookCopy", b =>
                {
                    b.HasOne("LibrarySystemApi.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Loan", b =>
                {
                    b.HasOne("LibrarySystemApi.Models.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystemApi.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Member", b =>
                {
                    b.HasOne("LibrarySystemApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystemApi.Models.Reservation", b =>
                {
                    b.HasOne("LibrarySystemApi.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystemApi.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
